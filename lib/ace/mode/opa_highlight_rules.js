/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from https://raw.githubusercontent.com/MLstate/OpaSublimeText/master/Opa.JSON-tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var OpaHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            token: "comment.line.double-dash",
            regex: /\/\/.*/,
            comment: "A line comment"
        }, {
            token: "invalid",
            regex: /(?=\/[*][*])[ 	]*[A-Za-z_0-9]+/,
            comment: "A doc comment header"
        }, {
            token: "comment.block.documentation",
            regex: /\/[*][*]/,
            push: [{
                token: "comment.block.documentation",
                regex: /[*][\/]/,
                next: "pop"
            }, {
                defaultToken: "comment.block.documentation"
            }],
            comment: "A doc comment"
        }, {
            token: "comment.block",
            regex: /\/[*]/,
            push: [{
                token: "comment.block",
                regex: /[*]\//,
                next: "pop"
            }, {
                defaultToken: "comment.block"
            }],
            comment: "A block comment"
        }, {
            token: "comment.block.preprocessor",
            regex: /#<[^>]*>/,
            comment: "A preprocessor command."
        }, {
            include: "#string"
        }, {
            include: "#string-insert"
        }, {
            include: "#xhtml"
        }, {
            token: "database.path",
            regex: /@?(?:\/\w+)+/,
            comment: "A database path"
        }, {
            token: "keyword.other",
            regex: /\b(?:package|import-plugin|import|database|db)\b/,
            comment: "A keyword"
        }, {
            token: "keyword.control",
            regex: /\b(?:type|function|module|match|parser|with|as|case|default|if|then|else|or|end|abstract)\b/,
            comment: "A keyword"
        }, {
            token: "invalid.illegal",
            regex: /\b(?:client|server|exposed|both)\b/,
            comment: "A dangerous modifier"
        }, {
            token: "keyword.other",
            regex: /\b(?:private|protected|recursive)\b/,
            comment: "A safe modifier"
        }, {
            token: "keyword.control",
            regex: /=|:|<-|[|]|->/,
            comment: "A keyword"
        }, {
            token: "support.type",
            regex: /\b(?:string|int|bool|xml|xhtml|binary)\b/,
            comment: "Common library types"
        }, {
            token: "constant.language",
            regex: /\b(?:true|false|void|none|empty)\b/,
            comment: "A well known named constant"
        }, {
            token: "constant.numeric",
            regex: /\b[0-9]+(?:[.][0-9]+)?(?:e(?:-|[+]?)[0-9]+)?\b/,
            comment: "A real"
        }, {
            token: "keyword.other",
            regex: /@(?:static_include_directory|static_resource_directory|async|expand)/,
            comment: "Usual directives"
        }, {
            token: "invalid.deprecated",
            regex: /@[A-Za-z0-9_]+\b/,
            comment: "An exotic directive"
        }, {
            token: "support.function",
            regex: /[-+*\/]+/,
            comment: "An operator"
        }, {
            token: "support.function",
            regex: /<|>|==|<=|>=|!=/,
            comment: "A comparison"
        }, {
            include: "#function-def"
        }, {
            token: "storage.modifier",
            regex: /^[ 	]*[#][-`a-zA-Z]+[ 	]*(?=(?:[=]|<-))/,
            comment: "A dom side effect target"
        }, {
            token: "support.constant",
            regex: /^[ 	]*[a-zA-Z_0-9]+[ 	]*(?::[ 	]*[A-Za-z0-9]+[ 	]*)?(?!==)(?=[=])/,
            comment: "A constant binding"
        }, {
            token: "support.constant",
            regex: /^[ 	]*`[^`]+`[ 	]*(?::[A-Za-z0-9]+)?(?=[=])/,
            comment: "A constant binding"
        }],
        "#string-insert": [{
            todo: {
                token: "text",
                regex: /{/,
                push: [{
                    token: "text",
                    regex: /}/,
                    next: "pop"
                }, {
                    include: "$self"
                }]
            }
        }],
        "#character-escape": [{
            token: "constant.character.escape",
            regex: /\\./,
            comment: "An escaped character"
        }],
        "#string": [{
            token: "string.quoted",
            regex: /"/,
            push: [{
                token: "string.quoted",
                regex: /"/,
                next: "pop"
            }, {
                include: "#character-escape"
            }, {
                include: "#string-insert"
            }, {
                token: "string.quoted",
                regex: /.*?/,
                comment: "String content"
            }],
            comment: "A quoted string with insertions"
        }],
        "#xhtml-attribute": [{
            token: [
                "xhtml.attribute.name, support.constant",
                "keyword.control",
                "support.type"
            ],
            regex: /(\s*[^\s"\/><'=]+)\s*(=)\s*(\w+)/,
            comment: "An attribute with computed value."
        }, {
            token: [
                "xhtml.attribute.name, support.constant",
                "keyword.control",
                "string.quoted"
            ],
            regex: /(\s*[^\s"\/><'=]+)\s*(=)\s*(")/,
            push: [{
                token: "string.quoted",
                regex: /"/,
                next: "pop"
            }, {
                include: "#character-escape"
            }, {
                include: "#string-insert"
            }, {
                token: "string.quoted",
                regex: /.*?/
            }],
            comment: "An attribute with string value."
        }, {
            todo: {
                token: [
                    "xhtml.attribute.name, support.constant",
                    "keyword.control",
                    "meta.delimiter.insert, string.quoted"
                ],
                regex: /(\s*[^\s"\/><'=]+)\s*(=)\s*({)/,
                push: [{
                    token: "meta.delimiter.insert, string.quoted",
                    regex: /}/,
                    next: "pop"
                }, {
                    include: "$self"
                }]
            },
            comment: "An attribute with an inserted value."
        }, {
            token: "xhtml.attribute.name, support.constant",
            regex: /\s*[^\s"\/><'=]+/,
            comment: "An empty attribute."
        }],
        "#xhtml-content": [{
            token: "xhtml.tag.delimiter, string.quoted",
            regex: /\s*>/,
            push: [{
                token: "text",
                regex: /(?=<\/)/,
                next: "pop"
            }, {
                include: "#string-insert"
            }, {
                include: "#xhtml"
            }, {
                token: "xhtml.text, string.quoted",
                regex: /.*?/,
                comment: "Xhtml text nodes."
            }]
        }],
        "#xhtml": [{
            token: [
                "xhtml.tag.delimiter, string.quoted",
                "xhtml.tag.delimiter, string.quoted"
            ],
            regex: /(<)(?:(\w+)|(?=>))/,
            push: [{
                token: [
                    "xhtml.tag.delimiter, string.quoted",
                    "xhtml.tag.delimiter, string.quoted",
                    "xhtml.tag.name, string.quoted",
                    "xhtml.tag.delimiter, string.quoted"
                ],
                regex: /(\/>)|(<\/)(\w*)\s*(>)/,
                next: "pop"
            }, {
                include: "#xhtml-content"
            }, {
                include: "#xhtml-attribute"
            }],
            comment: "Xhtml value with opening and ending tags."
        }],
        "#function-arg": [{
            token: ["support.type", "variable.parameter"],
            regex: /((?:[a-zA-Z0-9()._]+\s+)?)(\w+)/,
            comment: "A (typed) function argument"
        }],
        "#function-body": [{
            todo: {
                token: ["text", "meta.delimiter.function"],
                regex: /(\)\s*)({)/,
                push: [{
                    token: "text",
                    regex: /(?=})/,
                    next: "pop"
                }, {
                    include: "$self"
                }]
            },
            comment: "A function body."
        }],
        "#function-def": [{
            token: ["support.type", "entity.name.function", "text"],
            regex: "(?<=function)\\s+((?:[A-Za-z0-9()._]+\\s+)?)([A-Za-z0-9._]*)\\s*(\\()",
            TODO: "FIXME: regexp doesn't have js equivalent",
            originalRegex: "(?<=function)(?:\\s+)([A-Za-z0-9()._]+\\s+)?([A-Za-z0-9._]*)(?:\\s*)\\(",
            push: [{
                token: "meta.delimiter.function",
                regex: /}/,
                next: "pop"
            }, {
                include: "#function-body"
            }, {
                include: "#function-arg"
            }],
            comment: "A function definition."
        }]
    }
    
    this.normalizeRules();
};

OpaHighlightRules.metaData = {
    name: "Opa",
    scopeName: "source.opa",
    fileTypes: ["opa"]
}


oop.inherits(OpaHighlightRules, TextHighlightRules);

exports.OpaHighlightRules = OpaHighlightRules;
});